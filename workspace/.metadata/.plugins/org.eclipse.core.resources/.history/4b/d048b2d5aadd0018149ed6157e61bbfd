package gri.engine.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.RowSet;
import javax.sql.rowset.CachedRowSet;

import com.sun.rowset.CachedRowSetImpl;

public final class DBHelper {

	// 此方法为获取数据库连接
	public static Connection getConnection() {
		Connection conn = null;
		try {
			String driver = Constant.driver; // 数据库驱动
			String url = Constant.url;// 数据库
			String user = Constant.user; // 用户名
			String password = Constant.password; // 密码
			Class.forName(driver); // 加载数据库驱动
			conn = DriverManager.getConnection(url, user, password);//url=jdbc:MySQL://222.201.145.241:3306/gridoc?useUnicode=true&characterEncoding=UTF-8
			//所有的段信息均从这个连接中来
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return conn;
	}

	/**
	 * 
	 * 增删改【Add、Del、Update】
	 * 
	 * @param sql
	 * @return int
	 */
	public static int executeNonQuery(String sql) {
		int size = 0;
		Connection conn = null;
		Statement stmt = null;
		try {
			conn = getConnection();
			stmt = conn.createStatement();
			size = stmt.executeUpdate(sql);
		} catch (SQLException err) {
			err.printStackTrace();
		} finally {
			free(null, stmt, conn);
		}
		return size;
	}

	/**
	 * 
	 * 增删改【Add、Delete、Update】
	 * 
	 * @param sql
	 * @param obj
	 * @return int
	 */
	public static int executeNonQuery(String sql, Object... obj) {
		int size = 0;
		Connection conn = null;
		PreparedStatement pstmt = null;
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(sql);
			for (int i = 0; i < obj.length; i++) {
				pstmt.setObject(i + 1, obj[i]);
			}
			size = pstmt.executeUpdate();

		} catch (SQLException err) {
			err.printStackTrace();
		} finally {
			free(null, pstmt, conn);
		}
		return size;
	}

	/**
	 * 
	 * 增【Add】
	 * 
	 * @param sql
	 * @param obj
	 * @return int 新生成ID
	 */
	public static int executeInsert(String sql, Object... obj) {//执行插入语句返回新段的ID
		int id = -1;
		ResultSet rs = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			for (int i = 0; i < obj.length; i++) {
				pstmt.setObject(i + 1, obj[i]);
			}
			pstmt.executeUpdate();
			rs = pstmt.getGeneratedKeys();
			if (rs.next()) {
				id = rs.getInt(1);//获取列索引为1的值
			} else {
				id = -1;
			}
		} catch (SQLException err) {
			err.printStackTrace();
		} finally {
			free(rs, pstmt, conn);
		}
		return id;
	}

	/**
	 * 
	 * 查【Query】
	 * 
	 * @param sql
	 * @return ResultSet
	 */
//	public static ResultSet executeQuery(String sql) {
//		Connection conn = null;
//		Statement stmt = null;
//		ResultSet rs=null;
////		CachedRowSet cachedRS=null;
////		try {
////			cachedRS = new CachedRowSetImpl();
////		} catch (SQLException e) {
////			// TODO Auto-generated catch block
////			e.printStackTrace();
////		}
//		try {
//			conn = getConnection();
//			stmt = conn.createStatement();
//			rs = stmt.executeQuery(sql);
////			cachedRS.populate(rs);
//		} catch (SQLException err) {
//			err.printStackTrace();
//		}
//		return rs;
//	}

	/**
	 * 
	 * 查【Query】
	 * 
	 * @param sql
	 * @param obj
	 * @return ResultSet
	 */
	public static ResultSet executeQuery(Connection conn,PreparedStatement pstmt,String sql, Object... obj) {
		ResultSet rs = null;
		try {
			pstmt = conn.prepareStatement(sql);
			for (int i = 0; i < obj.length; i++) {
				pstmt.setObject(i + 1, obj[i]);
			}
			rs = pstmt.executeQuery();
		} catch (SQLException err) {
			err.printStackTrace();
		}
		return rs;
	}
	
//	public static ResultSet executeQuery(String sql, Object... obj) {
////		Connection conn = null;//这个方法不能使用CachedRowSet，因为存在使用过连接的SQL语句调用，这时候CachedRowSet会识别table.ColumnName的列名为无效
////		PreparedStatement pstmt = null;
////		ResultSet rs=null;
////		CachedRowSet cachedRS=null;
////		try {
////			cachedRS = new CachedRowSetImpl();
////		} catch (SQLException e) {
////			// TODO Auto-generated catch block
////			e.printStackTrace();
////		}
////		try {
////			conn=getConnection();
////			pstmt = conn.prepareStatement(sql);
////			for (int i = 0; i < obj.length; i++) {
////				pstmt.setObject(i + 1, obj[i]);
////			}
////			rs = pstmt.executeQuery();
////			cachedRS.populate(rs);
////		} catch (SQLException err) {
////			err.printStackTrace();
////		}finally {
////			free(rs,pstmt,conn);
////		}
////		return cachedRS;
//		Connection conn=null;
//		PreparedStatement pstmt=null;
//		ResultSet rs=null;
//		try {
//			conn=getConnection();
//			pstmt = conn.prepareStatement(sql);
//			for (int i = 0; i < obj.length; i++) {
//				pstmt.setObject(i + 1, obj[i]);
//			}
//			rs = pstmt.executeQuery();
//		}catch(Exception e)
//		{
//			e.printStackTrace();
//		}
//		return rs;
//	}

	/**
	 * 
	 * 判断记录是否存在
	 * 
	 * @param sql
	 * @return Boolean
	 */

	public static Boolean isExist(String sql) {
		ResultSet rs = null;
		Connection conn=DBHelper.getConnection();
		PreparedStatement ps=null;
		try {
			ps = conn.prepareStatement(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs = executeQuery(conn,ps,sql);
			rs.last();
			int count = rs.getRow();
			if (count > 0) {
				return true;
			} else {
				return false;
			}
		} catch (SQLException err) {
			err.printStackTrace();
			return false;
		} finally {
			free(rs,ps,conn);
		}
	}

	/**
	 * 
	 * 判断记录是否存在
	 * 
	 * @param sql
	 * @return Boolean
	 */
	public static Boolean isExist(String sql, Object... obj) {
		ResultSet rs = null;
		Connection conn=DBHelper.getConnection();
		PreparedStatement ps=null;
		try {
			ps = conn.prepareStatement(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs = executeQuery(conn,ps,sql, obj);
			rs.last();
			int count = rs.getRow();
			if (count > 0) {
				return true;
			} else {
				return false;
			}
		} catch (SQLException err) {
			err.printStackTrace();
			return false;
		} finally {
			free(rs,ps,conn);
		}
	}

	/**
	 * 
	 * 获取查询记录的总行数
	 * 
	 * @param sql
	 * @return int
	 */
	public static int getCount(String sql) {
		int size = 0;
		ResultSet rs = null;
		Connection conn=DBHelper.getConnection();
		PreparedStatement ps=null;
		try {
			ps = conn.prepareStatement(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs = executeQuery(conn,ps,sql);
			rs.last();
			size = rs.getRow();
		} catch (SQLException err) {
			err.printStackTrace();
		} finally {
			free(rs,ps,conn);
		}
		return size;
	}

	/**
	 * 
	 * 获取查询记录的总行数
	 *
	 * @param sql
	 * @param obj
	 * @return int
	 */
	public static int getCount(String sql, Object... obj) {
		int size = 0;
		ResultSet rs = null;
		Connection conn=DBHelper.getConnection();
		PreparedStatement ps=null;
		try {
			ps = conn.prepareStatement(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs = executeQuery(conn,ps,sql, obj);
			rs.last();
			size = rs.getRow();
		} catch (SQLException err) {
			err.printStackTrace();
		} finally {
			free(rs,ps,conn);
		}
		return size;
	}

	/**
	 * 
	 * 释放【ResultSet】资源
	 * 
	 * @param rs
	 */
	public static void free(ResultSet rs) {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (SQLException err) {
			err.printStackTrace();
		}
	}

	/**
	 * 
	 * 释放【Statement】资源
	 * 
	 * @param st
	 */
	public static void free(Statement st) {
		try {
			if (st != null) {
				st.close();
			}
		} catch (SQLException err) {
			err.printStackTrace();
		}
	}

	/**
	 * 
	 * 释放【Connection】资源
	 * 
	 * @param conn
	 */

	public static void free(Connection conn) {
		try {
			if (conn != null) {
				conn.close();
			}
		} catch (SQLException err) {
			err.printStackTrace();
		}
	}

	/**
	 * 
	 * 释放所有数据资源
	 * 
	 * @param rs
	 * @param st
	 * @param conn
	 */
	public static void free(ResultSet rs, Statement st, Connection conn) {
		free(rs);
		free(st);
		free(conn);
	}

	public static void main(String[] args)
	{
		String sql="select * from paragraph";
//		executeQuery(sql);
	}
	
}